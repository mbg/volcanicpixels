(function() {
  var Test, jsonLint, simpleTest, str, test;

  str = function(obj) {
    if (obj === null) {
      return "null";
    } else if (typeof obj === "undefined") {
      return "undefined";
    } else {
      return obj.toString();
    }
  };

  Test = (function() {

    function Test(name, func) {
      this.name = name;
      this.func = func;
      this.num = 0;
    }

    Test.prototype.expect = function(num) {
      return this.num = num;
    };

    Test.prototype.equal = function(arg1, arg2, message) {
      if (message == null) {
        message = "''";
      }
      this.num--;
      if (arg1 !== arg2) {
        throw "NotEqual: '" + (str(arg1)) + "' does not equal '" + (str(arg2)) + "'\n   " + message;
      }
    };

    Test.prototype.deepEqual = function(arg1, arg2, message) {
      if (message == null) {
        message = "";
      }
      this.num--;
      if (!require('deep-equal')(arg1, arg2)) {
        throw "NotEqual: '" + (str(arg1)) + "' does not equal '" + (str(arg2)) + "'\n   " + message;
      }
    };

    Test.prototype.ok = function(bool, message) {
      if (message == null) {
        message = "";
      }
      this.num--;
      if (!bool) {
        throw "NotOk: false was passed to ok\n   " + message;
      }
    };

    Test.prototype.done = function(message) {
      if (message == null) {
        message = "";
      }
      if (this.num !== 0) {
        throw "NotDone: " + (str(this.num)) + " more checks were expected before done was called\n   " + message;
      }
    };

    Test.prototype.run = function() {
      this.func.call(this);
      return this.done();
    };

    return Test;

  })();

  test = function(name, func) {
    var t;
    t = new Test(name, func);
    return exports[name] = function() {
      return t.run();
    };
  };

  exports.RunAll = function(throwException) {
    var name;
    for (name in exports) {
      if (name !== "RunAll") {
        if (throwException) {
          exports[name]();
        } else {
          try {
            exports[name]();
          } catch (ex) {
            console.log("Error in Test '" + name + "'");
            console.log("Message: " + ex);
            console.log("Stack:\n" + ex.stack);
            console.log('');
          }
        }
      }
    }
  };

  jsonLint = require('../src/durable-json-lint');

  simpleTest = function(inJson, outJson, errorCount) {
    if (errorCount == null) {
      errorCount = null;
    }
    return test(inJson + " -> " + outJson, function() {
      var res;
      this.num++;
      res = jsonLint(inJson);
      this.equal(outJson, res.json);
      if (errorCount) {
        this.num++;
        return this.equal(errorCount, res.errors.length);
      }
    });
  };

  simpleTest('{"test":"test"}', '{"test":"test"}');

  simpleTest('{test:1}', '{"test":1}');

  simpleTest('{test:test}', '{"test":"test"}');

  simpleTest('[1,test,"test",0x11]', '[1,"test","test",17]');

  simpleTest('[1,[1,2,3],test,function(){}]', '[1,[1,2,3],"test",null]');

  simpleTest("{test:'test'}", '{"test":"test"}');

  simpleTest('{"test":"test1","test":"test2"}', '{"test":"test1"}', 1);

  simpleTest('', null, 1);

  simpleTest('-1', '-1', 0);

  simpleTest('[1,]', '[1]', 0);

  simpleTest('[1]//test', '[1]', 1);

  simpleTest('[1]/*test*/', '[1]', 1);

  test("crash test", function() {
    var res;
    this.expect(1);
    res = jsonLint("{fun:cool");
    return this.ok(res.errors.length === 1 && !(res.json != null));
  });

}).call(this);
